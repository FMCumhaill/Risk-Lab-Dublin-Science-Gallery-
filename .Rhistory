install.packages("car")
install.packages("car")
install.packages("ggplot2")
install.packages("caret")
install.packages("RCurl")
install.packages("prettyR")
### R code from vignette source 'Lecture8-2015.Rnw'
###################################################
### code chunk number 1: cv1
###################################################
library(leaps)
n<-75; noisesd<-2
x<-sort(rnorm(n))
yy<-1+2*x-.5*x^2+rnorm(n,sd=noisesd)
xx<-as.matrix(cbind(x,x^2,x^3))
##
rleaps<-regsubsets(xx,yy,int=T,nbest=4,nvmax=4,really.big=T,method=c("ex")) ## all subset models
cleaps<-summary(rleaps,matrix=T) ## True/False matrix. The r-th is a True/False statement about which
Models<-cleaps$which
Models<-rbind(c(T,rep(F,3)),Models)
colnames(Models)<-c("intercept","b1","b2","b3")
## Note, I actually did the modeling fitting to get the model list instead of programming up an enumeration scheme
###################################################
### code chunk number 2: cv2
###################################################
K<-10
ii<-sample(seq(1,length(yy)),length(yy))
foldsize<-floor(length(yy)/K)
sizefold<-rep(foldsize,K)
restdata<-length(yy)-K*foldsize
if (restdata>0) {
sizefold[1:restdata]<-sizefold[1:restdata]+1}
## creates the size for each fold
###################################################
### code chunk number 3: cv3
###################################################
Prederrors<-matrix(0,dim(Models)[1],K)
# a matrix to store the prediction errors in
iused<-0
Xmat<-cbind(rep(1,n),xx)
for (k in (1:K)) {
itest<-ii[(iused+1):(iused+sizefold[k])]
itrain<-ii[-c((iused+1):(iused+sizefold[k]))]
iused<-iused+length(itest)
for (mm in (1:dim(Models)[1])) {
betahat<-solve(t(Xmat[itrain,Models[mm,]])%*%Xmat[itrain,Models[mm,]])%*%t(Xmat[itrain,Models[mm,]])%*%yy[itrain]
ypred<-Xmat[itest,Models[mm,]]%*%betahat
Prederrors[mm,k]<-sum((yy[itest]-ypred)^2) } }
PE<-apply(Prederrors,1,sum)/n  # final prediction errors.
###################################################
### code chunk number 4: cv4
###################################################
library(xtable)
z<-data.frame(as.matrix(cbind(Prederrors,PE)))
colnames(z) <- c("Fold1","Fold2","Fold3","Fold4","Fold5","Fold6","Fold7","Fold8","Fold9","Fold10","PE")
row.names<-c(seq(1,8))
xtable(z, digits=c(0, rep(2,11)),caption="Prederrors in different folds and total",label="tab:CVresult")
###################################################
### code chunk number 5: cv5
###################################################
winmod<-Models[which.min(PE),]
print(winmod)
###################################################
### code chunk number 6: cv6
###################################################
n<-1500; noisesd<-2
x<-sort(rnorm(n))
yy<-1+2*x-.5*x^2+rnorm(n,sd=noisesd)
xx<-as.matrix(cbind(x,x^2,x^3))
##
rleaps<-regsubsets(xx,yy,int=T,nbest=4,nvmax=4,really.big=T,method=c("ex")) ## all subset models
cleaps<-summary(rleaps,matrix=T) ## True/False matrix. The r-th is a True/False statement about which
Models<-cleaps$which
Models<-rbind(c(T,rep(F,3)),Models)
colnames(Models)<-c("intercept","b1","b2","b3")
K<-10
ii<-sample(seq(1,length(yy)),length(yy))
foldsize<-floor(length(yy)/K)
sizefold<-rep(foldsize,K)
restdata<-length(yy)-K*foldsize
if (restdata>0) {
sizefold[1:restdata]<-sizefold[1:restdata]+1 }
## creates the size for each fold
Prederrors<-matrix(0,dim(Models)[1],K)
# a matrix to store the prediction errors in
iused<-0
Xmat<-cbind(rep(1,n),xx)
for (k in (1:K)) {
itest<-ii[(iused+1):(iused+sizefold[k])]
itrain<-ii[-c((iused+1):(iused+sizefold[k]))]
iused<-iused+length(itest)
for (mm in (1:dim(Models)[1])) {
betahat<-solve(t(Xmat[itrain,Models[mm,]])%*%Xmat[itrain,Models[mm,]])%*%t(Xmat[itrain,Models[mm,]])%*%yy[itrain]
ypred<-Xmat[itest,Models[mm,]]%*%betahat
Prederrors[mm,k]<-sum((yy[itest]-ypred)^2) } }
PE<-apply(Prederrors,1,sum)/n  # final prediction errors.
###################################################
### code chunk number 7: cv6
###################################################
z<-data.frame(as.matrix(cbind(Prederrors,PE)))
colnames(z) <- c("Fold1","Fold2","Fold3","Fold4","Fold5","Fold6","Fold7","Fold8","Fold9","Fold10","PE")
row.names<-c(seq(1,8))
xtable(z, digits=c(0, rep(0,10),3),caption="Prederrors in different folds and total",label="tab:CVresult2")
###################################################
### code chunk number 8: cv7
###################################################
winmod<-Models[which.min(PE),]
print(winmod)
###################################################
### code chunk number 9: cv8
###################################################
#LOOCV
PE<-rep(0,dim(Models)[1])
for (mm in (1:dim(Models)[1])) {
modfit<-lm(yy~Xmat[,Models[mm,]]-1)
rstud<-rstudent(modfit)*summary(modfit)$sig
PE[mm]<-sum((rstud)^2)/length(yy) }
###################################################
### code chunk number 10: cv7
###################################################
winmod<-Models[which.min(PE),]
print(winmod)
###################################################
### code chunk number 11: cvldl1
###################################################
SA<-data.frame(read.table("SA.dat",header=T)) ## read in the data
SAuse<-SA
SAuse$ldl<-log(SA$ldl)
SAuse$obesity<-log(SA$obesity)
SAuse$age<-log(SA$age)
## Applying the transformations from Lecture 6
yy<-SAuse[,12]
xx<-SAuse[,-12]
## the 12th column is the outcome
rleaps<-regsubsets(xx,yy,int=T,nbest=1000,nvmax=250,really.big=T,method=c("ex"))
## all subset models
cleaps<-summary(rleaps,matrix=T)
## True/False matrix. The r-th is a True/False statement
## about which variables are included
Models<-cleaps$which
Models<-rbind(c(T,rep(F,dim(xx)[2])),Models)
###################################################
### code chunk number 12: cvldl2
###################################################
K<-10
ii<-sample(seq(1,length(yy)),length(yy))
foldsize<-floor(length(yy)/K)
sizefold<-rep(foldsize,K)
restdata<-length(yy)-K*foldsize
if (restdata>0) {
sizefold[1:restdata]<-sizefold[1:restdata]+1 }
## creates the size for each fold
###################################################
### code chunk number 13: cvldl3
###################################################
Prederrors<-matrix(0,dim(Models)[1],K)
# a matrix to store the prediction errors in
iused<-0
Xmat<-as.matrix(cbind(rep(1,dim(xx)[1]),xx))
for (k in (1:K)) {
itest<-ii[(iused+1):(iused+sizefold[k])] ## the k-fold test set
itrain<-ii[-c((iused+1):(iused+sizefold[k]))] ## the k-fold training set
iused<-iused+length(itest)
for (mm in (1:dim(Models)[1])) {
betahat<-solve(t(Xmat[itrain,Models[mm,]])%*%Xmat[itrain,
Models[mm,]])%*%t(Xmat[itrain,Models[mm,]])%*%yy[itrain]
ypred<-Xmat[itest,Models[mm,]]%*%betahat ## predictions
Prederrors[mm,k]<-sum((yy[itest]-ypred)^2) } }
PE<-apply(Prederrors,1,sum)/length(yy)  ## final prediction errors, average across all folds.
###################################################
### code chunk number 14: cvldl4
###################################################
jj<-sort.list(PE)[1:5]
print(as.matrix(Models[jj,]))
plot(c(1,apply(cleaps$which,1,sum)),PE,xlab="model size",ylab="CV error")
###################################################
### code chunk number 15: cvldl4b
###################################################
z<-data.frame(as.matrix(cbind(Prederrors[jj,],PE[jj])))
colnames(z) <- c("Fold1","Fold2","Fold3","Fold4","Fold5","Fold6","Fold7","Fold8",
"Fold9","Fold10","PE")
row.names<-c(seq(1,5))
xtable(z, digits=c(0, rep(3,10),5),
caption="Prederrors in different folds and total",label="tab:CVldl")
###################################################
### code chunk number 16: cvldl5
###################################################
winmod<-Models[which.min(PE),]
print((names(SA)[-12])[winmod[-1]==T])
###################################################
### code chunk number 17: cvldl6
###################################################
mm<-lm(log(ldl)~log(age)+sbp+adiposity+log(obesity)+typea+alcohol+
alcind+tobacco+tobind+as.factor(chd)+as.factor(famhist),data=SA)
ss<-step(mm,trace=F)
print(ss)
###################################################
### code chunk number 18: cvldl6
###################################################
#LOOCV
PE<-rep(0,dim(Models)[1])
for (mm in (1:dim(Models)[1])) {
modfit<-lm(yy~Xmat[,Models[mm,]]-1)
rstud<-rstudent(modfit)*summary(modfit)$sig
PE[mm]<-sum((rstud)^2)/length(yy) }
###################################################
### code chunk number 19: cvldl4
###################################################
jj<-sort.list(PE)[1:5]
print(as.matrix(Models[jj,]))
Prederrors<-matrix(0,dim(Models)[1],K)
# a matrix to store the prediction errors in
iused<-0
Xmat<-cbind(rep(1,n),xx)
for (k in (1:K)) {
itest<-ii[(iused+1):(iused+sizefold[k])]
itrain<-ii[-c((iused+1):(iused+sizefold[k]))]
iused<-iused+length(itest)
for (mm in (1:dim(Models)[1])) {
betahat<-solve(t(Xmat[itrain,Models[mm,]])%*%Xmat[itrain,Models[mm,]])%*%t(Xmat[itrain,Models[mm,]])%*%yy[itrain]
ypred<-Xmat[itest,Models[mm,]]%*%betahat
Prederrors[mm,k]<-sum((yy[itest]-ypred)^2) } }
PE<-apply(Prederrors,1,sum)/n  # final prediction errors.
install.packages("psych")
install.packages("ggplot2")
install.packages("plotly")
install.packages("plotly")
head(data)
setwd("~/GitHub/Risk_Lab")
# Dataset Import
data <- read.csv(file="Risklab_2.5.csv", header=TRUE, sep=",")
names(data)
head(data)
print(summary(fit))
#qplot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
#fit <- aov(data$Smoking ~ as.factor(data$HIGHEST_LEVEL_EDUCATION) )
#print(summary(fit))
qplot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
plot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
View(data)
install.packages("ggplot2")
plot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
qplot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
#plot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
#fit <- aov(data$Smoking ~ as.factor(data$HIGHEST_LEVEL_EDUCATION) )
#print(summary(fit))
p10 <- ggplot(airquality, aes(x = Month, y = Ozone)) + geom_boxplot()
boxplot(data$HIGHEST_LEVEL_EDUCATION),data$Smoking, main="Car Milage Data",
boxplot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
plot(data$HIGHEST_LEVEL_EDUCATION,data$Smoking)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
